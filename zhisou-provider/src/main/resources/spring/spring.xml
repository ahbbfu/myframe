<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-3.0.xsd   
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd   
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd" >
    
    <!-- 扫描com.zhisou包下的所有class文件，配置注解的类全都装入容器中进行管理 -->
    <context:component-scan base-package="com.zhisou" />
    <!-- 添加注解驱动 -->
    <mvc:annotation-driven />
    <!-- 引入jdbc配置文件 -->  
    <context:property-placeholder location="classpath:application.properties" />  
      
    <!--创建jdbc数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
		<property name="driverClassName" value="${jdbc.driverClassName}" /> 
	  	<property name="url" value="${jdbc.url}" /> 
	  	<property name="username" value="${jdbc.username}" /> 
	  	<property name="password" value="${jdbc.password}" /> 
	  	<!-- 配置初始化大小、最小、最大 --> 
	  	<property name="initialSize" value="1" /> 
	  	<property name="minIdle" value="1" /> 
	  	<property name="maxActive" value="10" />
	
	  	<!-- 配置获取连接等待超时的时间 --> 
	  	<property name="maxWait" value="10000" />
	
	  	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
	  	<property name="timeBetweenEvictionRunsMillis" value="60000" />
	
	  	<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
	  	<property name="minEvictableIdleTimeMillis" value="300000" />
	
	  	<property name="testWhileIdle" value="true" />
	
	  	<!-- 这里建议配置为TRUE，防止取到的连接不可用 --> 
	  	<property name="testOnBorrow" value="true" /> 
	  	<property name="testOnReturn" value="false" />
	
	  	<!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
	  	<property name="poolPreparedStatements" value="true" /> 
	  	<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	
	  	<!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
	  	<property name="defaultAutoCommit" value="true" />
	
	  	<!-- 验证连接有效与否的SQL，不同的数据配置不同 --> 
	  	<property name="validationQuery" value="select 1 " /> 
	  	<property name="filters" value="stat" /> 
	  	<property name="proxyFilters"> 
	   		<list> 
	    		<ref bean="logFilter" /> 
	   		</list> 
	  	</property> 
	 </bean>
	
	<bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"> 
	  <property name="statementExecutableSqlLogEnable" value="false" /> 
	</bean>
	
    <!-- 创建SqlSessionFactory，同时指定数据源 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />
        <!-- 配置sql映射文件所在位置  注意：默认与mapper类位置相同   -->  
        <property name="mapperLocations" value="classpath:com/zhisou/mapper/*.xml" />
        <property name="typeAliasesPackage" value="com.zhisou.api.model" /> 
        <property name="configLocation" value="classpath:spring/mybatis-config.xml" />
        
    </bean>  
   
    <!-- 配置事务管理器，全注解声明式事务  -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    <tx:annotation-driven transaction-manager="transactionManager" />  
     
    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.zhisou.mapper" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
        <!-- 默认情况下会自动注入id=sqlSessionFactory的bean，也可以按上述方式指定sqlSessionFactory -->  
    </bean>

<!-- 	<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> -->
<!-- 	   <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" /> -->
<!-- 	</bean> -->
</beans>